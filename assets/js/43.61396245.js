(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{324:function(t,n,a){"use strict";a.r(n);var e=a(14),s=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"notificationlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notificationlistener"}},[t._v("#")]),t._v(" NotificationListener")]),t._v(" "),n("p",[t._v("一个监听Notification在Element树中冒泡的Widget。事件由用户主动触发。具体参考"),n("a",{attrs:{href:"https://www.youtube.com/watch?v=cAnFbFoGM50",target:"_blank",rel:"noopener noreferrer"}},[t._v("youtube"),n("OutboundLink")],1)]),t._v(" "),n("p",[t._v("NotificationListener对应的Element为_NotificationElement。 Flutter Framework会维护一颗通知树NotificationTree，这颗树的结构类似以Element树，但是只有NotifiableElementMixin部分节点的映射。NotificationTree和ElementTree的形成时间也一致，在Element::mount时触发attachNotificationTree()，ElementTree构建完成时NotificationTree也构建完成。")]),t._v(" "),n("h2",{attrs:{id:"attachnotificationtree"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#attachnotificationtree"}},[t._v("#")]),t._v(" attachNotificationTree")]),t._v(" "),n("p",[t._v("Element实现：")]),t._v(" "),n("div",{staticClass:"language-dart extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dart"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("attachNotificationTree")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _notificationTree "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _parent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_notificationTree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("NotifiableElementMixin实现：")]),t._v(" "),n("div",{staticClass:"language-dart extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dart"}},[n("code",[t._v("  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("attachNotificationTree")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _notificationTree "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_NotificationNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_parent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_notificationTree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("每个Element都持有一个NotificationTree节点=>_notificationTree(_NotificationNode),这个节点对应的Element则分为几种情况：")]),t._v(" "),n("ol",[n("li",[t._v("当前Element为NotifiableElementMixin类型，那么_notificationTree对应的Element就是当前Element。")]),t._v(" "),n("li",[t._v("当前Element不是NotifiableElementMixin类型，那么_notificationTree对应的Element是离当前Element最近的类型为NotifiableElementMixin的祖先节点。如果期祖先节点没有NotifiableElementMixin类型的Element，那么_notificationTree为空。")])]),t._v(" "),n("h2",{attrs:{id:"通知冒泡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通知冒泡"}},[t._v("#")]),t._v(" 通知冒泡")]),t._v(" "),n("p",[t._v("我们可以通过任何BuildContext发送冒泡通知。dispatchNotification是BuildContext暴露的接口。Element会将Notification转发给对应的_notificationTree节点进行冒泡。_notificationTree往上冒泡，将通知逐个发送给NotifiableElementMixin，直到NotifiableElementMixin消耗事件才结束冒泡，否则冒泡到树顶。")]),t._v(" "),n("div",{staticClass:"language-dart extra-class"},[n("pre",{pre:!0,attrs:{class:"language-dart"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mixin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NotifiableElementMixin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Called when a notification of the appropriate type arrives at this")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// location in the tree.")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Return true to cancel the notification bubbling. Return false to")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// allow the notification to continue to be dispatched to further ancestors.")]),t._v("\n  bool "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("onNotification")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Notification")]),t._v(" notification"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token metadata function"}},[t._v("@override")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("attachNotificationTree")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    _notificationTree "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("_NotificationNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_parent"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_notificationTree"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"notificationelement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notificationelement"}},[t._v("#")]),t._v(" _NotificationElement")]),t._v(" "),n("p",[t._v("_NotificationElement是官方提供的一种NotifiableElementMixin的实现，主要添加了两种功能：")]),t._v(" "),n("ol",[n("li",[t._v("将事件转发给Widget=> NotificationListener;")]),t._v(" "),n("li",[t._v("转发时过滤类型。")])])])}),[],!1,null,null,null);n.default=s.exports}}]);